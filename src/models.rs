use chrono::{DateTime, Utc};
use std::sync::{Arc, Mutex};
use strum_macros::EnumIter;
use strum_macros::IntoStaticStr;
use strum_macros::AsStaticStr;
use strum_macros::EnumString;

#[derive(
    Debug, Default, Clone, Copy, PartialEq, EnumIter, serde::Deserialize, serde::Serialize,
)]
pub enum Method {
    #[default]
    Get,
    Post,
    Put,
    Patch,
    Delete,
    Head,
    Options,
    Trace,
    Connect,
}

#[derive(Default, serde::Deserialize, serde::Serialize)]
pub struct RequestHeader {
    pub enabled: bool,
    pub autogenerated: bool,
    pub key: String,
    pub value: String,
}

#[derive(Default, serde::Deserialize, serde::Serialize)]
pub struct RequestParam {
    pub enabled: bool,
    pub key: String,
    pub value: String,
}

#[derive(
    Debug, Default, Clone, Copy, PartialEq, EnumIter, serde::Deserialize, serde::Serialize,
)]
pub enum RawBodyType {
    Text,
    #[default]
    JSON,
}

#[derive(Debug, Default, Clone, PartialEq, EnumIter, IntoStaticStr, EnumString, AsStaticStr, serde::Deserialize, serde::Serialize)]
pub enum RequestBody {
    #[default]
    None,
    Raw(String, RawBodyType),
}


#[derive(Default, serde::Deserialize, serde::Serialize)]
pub struct Request {
    pub method: Method,
    pub url: String,
    pub params: Vec<RequestParam>,
    pub headers: Vec<RequestHeader>,
    pub body: RequestBody,
}
#[derive(Default, serde::Deserialize, serde::Serialize)]
pub struct RequestModel {
    pub request: Request,
    pub response: Arc<Mutex<Option<Result<Response, ResponseError>>>>,
}

#[derive(Default, serde::Deserialize, serde::Serialize)]
pub struct Response {
    pub status: u16,
    pub content_length: Option<u64>,
    pub start: DateTime<Utc>,
    pub end: DateTime<Utc>,
    pub text: String,
    pub headers: Vec<Header>,
}
#[derive(Default, serde::Deserialize, serde::Serialize)]
pub struct ResponseError(pub String);

#[derive(serde::Deserialize, serde::Serialize)]
pub struct Header {
    pub name: String,
    pub value: HeaderValue,
}

#[derive(serde::Deserialize, serde::Serialize)]
pub enum HeaderValue {
    String(String),
    Bytes(Vec<u8>),
}
